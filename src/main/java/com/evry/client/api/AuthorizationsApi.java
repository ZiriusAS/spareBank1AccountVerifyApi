/*
 * CRS account authorisation API
 * This service exposes an API to validate approver’s right of disposal to account. This API accesses the same authorization data as is used when TietoEvry validates approver data.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.evry.client.api;

import com.evry.client.ApiCallback;
import com.evry.client.ApiClient;
import com.evry.client.ApiException;
import com.evry.client.ApiResponse;
import com.evry.client.Configuration;
import com.evry.client.Pair;
import com.evry.client.ProgressRequestBody;
import com.evry.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.evry.model.AuthorisationRequest;
import com.evry.model.AuthorisationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationsApi {
    private ApiClient apiClient;

    public AuthorizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for authorize
     * @param body  (required)
     * @param X_EVRY_CLIENT_REQUESTID Unique identification of request (e.g. used as log reference) (required)
     * @param X_EVRY_CLIENT_CLIENTNAME Unique name identifying the requesting front or back-end application. For b2b, the certificates must be registered in the ESB on this name (required)
     * @param X_EVRY_DATAOWNERORGID Identifies the organization owning the data requested. Same as BankID, 4 digits, e.g. 1801. (required)
     * @param X_EVRY_ORIGIN Used to distinguish origin of request. Is entered as ERP-&lt;erp-identifier&gt;, where “erp-identifier” is the name of the ERP. (required)
     * @param X_EVRY_CUSTOMERID The id of the customer that is accessed (OrgNr/ForetaksNummer) (required)
     * @param X_EVRY_USERID The SSN (Social Security Number) of the user issuing this request. In a corporate context this is a corporate user accessing data of a corporate customer. (required)
     * @param signature Used in accordance with https://datatracker.ietf.org/doc/draft-cavage-http-signatures/ (required)
     * @param digest Used in accordance with https://datatracker.ietf.org/doc/draft-cavage-http-signatures/ (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authorizeCall(AuthorisationRequest body, String X_EVRY_CLIENT_REQUESTID, String X_EVRY_CLIENT_CLIENTNAME, String X_EVRY_DATAOWNERORGID, String X_EVRY_ORIGIN, String X_EVRY_CUSTOMERID, String X_EVRY_USERID, String signature, String digest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_EVRY_CLIENT_REQUESTID != null)
        localVarHeaderParams.put("X-EVRY-CLIENT-REQUESTID", apiClient.parameterToString(X_EVRY_CLIENT_REQUESTID));
        if (X_EVRY_CLIENT_CLIENTNAME != null)
        localVarHeaderParams.put("X-EVRY-CLIENT-CLIENTNAME", apiClient.parameterToString(X_EVRY_CLIENT_CLIENTNAME));
        if (X_EVRY_DATAOWNERORGID != null)
        localVarHeaderParams.put("X-EVRY-DATAOWNERORGID", apiClient.parameterToString(X_EVRY_DATAOWNERORGID));
        if (X_EVRY_ORIGIN != null)
        localVarHeaderParams.put("X-EVRY-ORIGIN", apiClient.parameterToString(X_EVRY_ORIGIN));
        if (X_EVRY_CUSTOMERID != null)
        localVarHeaderParams.put("X-EVRY-CUSTOMERID", apiClient.parameterToString(X_EVRY_CUSTOMERID));
        if (X_EVRY_USERID != null)
        localVarHeaderParams.put("X-EVRY-USERID", apiClient.parameterToString(X_EVRY_USERID));
        if (signature != null)
        localVarHeaderParams.put("Signature", apiClient.parameterToString(signature));
        if (digest != null)
        localVarHeaderParams.put("Digest", apiClient.parameterToString(digest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeValidateBeforeCall(AuthorisationRequest body, String X_EVRY_CLIENT_REQUESTID, String X_EVRY_CLIENT_CLIENTNAME, String X_EVRY_DATAOWNERORGID, String X_EVRY_ORIGIN, String X_EVRY_CUSTOMERID, String X_EVRY_USERID, String signature, String digest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling authorize(Async)");
        }
        // verify the required parameter 'X_EVRY_CLIENT_REQUESTID' is set
        if (X_EVRY_CLIENT_REQUESTID == null) {
            throw new ApiException("Missing the required parameter 'X_EVRY_CLIENT_REQUESTID' when calling authorize(Async)");
        }
        // verify the required parameter 'X_EVRY_CLIENT_CLIENTNAME' is set
        if (X_EVRY_CLIENT_CLIENTNAME == null) {
            throw new ApiException("Missing the required parameter 'X_EVRY_CLIENT_CLIENTNAME' when calling authorize(Async)");
        }
        // verify the required parameter 'X_EVRY_DATAOWNERORGID' is set
        if (X_EVRY_DATAOWNERORGID == null) {
            throw new ApiException("Missing the required parameter 'X_EVRY_DATAOWNERORGID' when calling authorize(Async)");
        }
        // verify the required parameter 'X_EVRY_ORIGIN' is set
        if (X_EVRY_ORIGIN == null) {
            throw new ApiException("Missing the required parameter 'X_EVRY_ORIGIN' when calling authorize(Async)");
        }
        // verify the required parameter 'X_EVRY_CUSTOMERID' is set
        if (X_EVRY_CUSTOMERID == null) {
            throw new ApiException("Missing the required parameter 'X_EVRY_CUSTOMERID' when calling authorize(Async)");
        }
        // verify the required parameter 'X_EVRY_USERID' is set
        if (X_EVRY_USERID == null) {
            throw new ApiException("Missing the required parameter 'X_EVRY_USERID' when calling authorize(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling authorize(Async)");
        }
        // verify the required parameter 'digest' is set
        if (digest == null) {
            throw new ApiException("Missing the required parameter 'digest' when calling authorize(Async)");
        }
        
        com.squareup.okhttp.Call call = authorizeCall(body, X_EVRY_CLIENT_REQUESTID, X_EVRY_CLIENT_CLIENTNAME, X_EVRY_DATAOWNERORGID, X_EVRY_ORIGIN, X_EVRY_CUSTOMERID, X_EVRY_USERID, signature, digest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform authorisation of customers accesss to the defined accounts in the request
     * Performs authorisation and returns the result of this along with the users AML status, relevant information of the customer/agreement and data used for revision purposes
     * @param body  (required)
     * @param X_EVRY_CLIENT_REQUESTID Unique identification of request (e.g. used as log reference) (required)
     * @param X_EVRY_CLIENT_CLIENTNAME Unique name identifying the requesting front or back-end application. For b2b, the certificates must be registered in the ESB on this name (required)
     * @param X_EVRY_DATAOWNERORGID Identifies the organization owning the data requested. Same as BankID, 4 digits, e.g. 1801. (required)
     * @param X_EVRY_ORIGIN Used to distinguish origin of request. Is entered as ERP-&lt;erp-identifier&gt;, where “erp-identifier” is the name of the ERP. (required)
     * @param X_EVRY_CUSTOMERID The id of the customer that is accessed (OrgNr/ForetaksNummer) (required)
     * @param X_EVRY_USERID The SSN (Social Security Number) of the user issuing this request. In a corporate context this is a corporate user accessing data of a corporate customer. (required)
     * @param signature Used in accordance with https://datatracker.ietf.org/doc/draft-cavage-http-signatures/ (required)
     * @param digest Used in accordance with https://datatracker.ietf.org/doc/draft-cavage-http-signatures/ (required)
     * @return AuthorisationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthorisationResponse authorize(AuthorisationRequest body, String X_EVRY_CLIENT_REQUESTID, String X_EVRY_CLIENT_CLIENTNAME, String X_EVRY_DATAOWNERORGID, String X_EVRY_ORIGIN, String X_EVRY_CUSTOMERID, String X_EVRY_USERID, String signature, String digest) throws ApiException {
        ApiResponse<AuthorisationResponse> resp = authorizeWithHttpInfo(body, X_EVRY_CLIENT_REQUESTID, X_EVRY_CLIENT_CLIENTNAME, X_EVRY_DATAOWNERORGID, X_EVRY_ORIGIN, X_EVRY_CUSTOMERID, X_EVRY_USERID, signature, digest);
        return resp.getData();
    }

    /**
     * Perform authorisation of customers accesss to the defined accounts in the request
     * Performs authorisation and returns the result of this along with the users AML status, relevant information of the customer/agreement and data used for revision purposes
     * @param body  (required)
     * @param X_EVRY_CLIENT_REQUESTID Unique identification of request (e.g. used as log reference) (required)
     * @param X_EVRY_CLIENT_CLIENTNAME Unique name identifying the requesting front or back-end application. For b2b, the certificates must be registered in the ESB on this name (required)
     * @param X_EVRY_DATAOWNERORGID Identifies the organization owning the data requested. Same as BankID, 4 digits, e.g. 1801. (required)
     * @param X_EVRY_ORIGIN Used to distinguish origin of request. Is entered as ERP-&lt;erp-identifier&gt;, where “erp-identifier” is the name of the ERP. (required)
     * @param X_EVRY_CUSTOMERID The id of the customer that is accessed (OrgNr/ForetaksNummer) (required)
     * @param X_EVRY_USERID The SSN (Social Security Number) of the user issuing this request. In a corporate context this is a corporate user accessing data of a corporate customer. (required)
     * @param signature Used in accordance with https://datatracker.ietf.org/doc/draft-cavage-http-signatures/ (required)
     * @param digest Used in accordance with https://datatracker.ietf.org/doc/draft-cavage-http-signatures/ (required)
     * @return ApiResponse&lt;AuthorisationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthorisationResponse> authorizeWithHttpInfo(AuthorisationRequest body, String X_EVRY_CLIENT_REQUESTID, String X_EVRY_CLIENT_CLIENTNAME, String X_EVRY_DATAOWNERORGID, String X_EVRY_ORIGIN, String X_EVRY_CUSTOMERID, String X_EVRY_USERID, String signature, String digest) throws ApiException {
        com.squareup.okhttp.Call call = authorizeValidateBeforeCall(body, X_EVRY_CLIENT_REQUESTID, X_EVRY_CLIENT_CLIENTNAME, X_EVRY_DATAOWNERORGID, X_EVRY_ORIGIN, X_EVRY_CUSTOMERID, X_EVRY_USERID, signature, digest, null, null);
        Type localVarReturnType = new TypeToken<AuthorisationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform authorisation of customers accesss to the defined accounts in the request (asynchronously)
     * Performs authorisation and returns the result of this along with the users AML status, relevant information of the customer/agreement and data used for revision purposes
     * @param body  (required)
     * @param X_EVRY_CLIENT_REQUESTID Unique identification of request (e.g. used as log reference) (required)
     * @param X_EVRY_CLIENT_CLIENTNAME Unique name identifying the requesting front or back-end application. For b2b, the certificates must be registered in the ESB on this name (required)
     * @param X_EVRY_DATAOWNERORGID Identifies the organization owning the data requested. Same as BankID, 4 digits, e.g. 1801. (required)
     * @param X_EVRY_ORIGIN Used to distinguish origin of request. Is entered as ERP-&lt;erp-identifier&gt;, where “erp-identifier” is the name of the ERP. (required)
     * @param X_EVRY_CUSTOMERID The id of the customer that is accessed (OrgNr/ForetaksNummer) (required)
     * @param X_EVRY_USERID The SSN (Social Security Number) of the user issuing this request. In a corporate context this is a corporate user accessing data of a corporate customer. (required)
     * @param signature Used in accordance with https://datatracker.ietf.org/doc/draft-cavage-http-signatures/ (required)
     * @param digest Used in accordance with https://datatracker.ietf.org/doc/draft-cavage-http-signatures/ (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeAsync(AuthorisationRequest body, String X_EVRY_CLIENT_REQUESTID, String X_EVRY_CLIENT_CLIENTNAME, String X_EVRY_DATAOWNERORGID, String X_EVRY_ORIGIN, String X_EVRY_CUSTOMERID, String X_EVRY_USERID, String signature, String digest, final ApiCallback<AuthorisationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeValidateBeforeCall(body, X_EVRY_CLIENT_REQUESTID, X_EVRY_CLIENT_CLIENTNAME, X_EVRY_DATAOWNERORGID, X_EVRY_ORIGIN, X_EVRY_CUSTOMERID, X_EVRY_USERID, signature, digest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthorisationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
